/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as QuoteImport } from './routes/quote'
import { Route as LogoutImport } from './routes/logout'
import { Route as BeansImport } from './routes/beans'
import { Route as AboutImport } from './routes/about'
import { Route as PublicImport } from './routes/_public'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth.index'
import { Route as PublicRegisterImport } from './routes/_public.register'
import { Route as PublicLoginImport } from './routes/_public.login'
import { Route as AuthProfileImport } from './routes/_auth.profile'
import { Route as AuthCirclesImport } from './routes/_auth.circles'

// Create/Update Routes

const QuoteRoute = QuoteImport.update({
  id: '/quote',
  path: '/quote',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const BeansRoute = BeansImport.update({
  id: '/beans',
  path: '/beans',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const PublicRegisterRoute = PublicRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)

const AuthCirclesRoute = AuthCirclesImport.update({
  id: '/circles',
  path: '/circles',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/beans': {
      id: '/beans'
      path: '/beans'
      fullPath: '/beans'
      preLoaderRoute: typeof BeansImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/quote': {
      id: '/quote'
      path: '/quote'
      fullPath: '/quote'
      preLoaderRoute: typeof QuoteImport
      parentRoute: typeof rootRoute
    }
    '/_auth/circles': {
      id: '/_auth/circles'
      path: '/circles'
      fullPath: '/circles'
      preLoaderRoute: typeof AuthCirclesImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterImport
      parentRoute: typeof PublicImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthCirclesRoute: typeof AuthCirclesRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthCirclesRoute: AuthCirclesRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PublicRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/about': typeof AboutRoute
  '/beans': typeof BeansRoute
  '/logout': typeof LogoutRoute
  '/quote': typeof QuoteRoute
  '/circles': typeof AuthCirclesRoute
  '/profile': typeof AuthProfileRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PublicRouteWithChildren
  '/about': typeof AboutRoute
  '/beans': typeof BeansRoute
  '/logout': typeof LogoutRoute
  '/quote': typeof QuoteRoute
  '/circles': typeof AuthCirclesRoute
  '/profile': typeof AuthProfileRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/about': typeof AboutRoute
  '/beans': typeof BeansRoute
  '/logout': typeof LogoutRoute
  '/quote': typeof QuoteRoute
  '/_auth/circles': typeof AuthCirclesRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/_auth/': typeof AuthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/beans'
    | '/logout'
    | '/quote'
    | '/circles'
    | '/profile'
    | '/login'
    | '/register'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/about'
    | '/beans'
    | '/logout'
    | '/quote'
    | '/circles'
    | '/profile'
    | '/login'
    | '/register'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_public'
    | '/about'
    | '/beans'
    | '/logout'
    | '/quote'
    | '/_auth/circles'
    | '/_auth/profile'
    | '/_public/login'
    | '/_public/register'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
  AboutRoute: typeof AboutRoute
  BeansRoute: typeof BeansRoute
  LogoutRoute: typeof LogoutRoute
  QuoteRoute: typeof QuoteRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
  AboutRoute: AboutRoute,
  BeansRoute: BeansRoute,
  LogoutRoute: LogoutRoute,
  QuoteRoute: QuoteRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_public",
        "/about",
        "/beans",
        "/logout",
        "/quote"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/circles",
        "/_auth/profile",
        "/_auth/"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/login",
        "/_public/register"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/beans": {
      "filePath": "beans.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/quote": {
      "filePath": "quote.tsx"
    },
    "/_auth/circles": {
      "filePath": "_auth.circles.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth.profile.tsx",
      "parent": "/_auth"
    },
    "/_public/login": {
      "filePath": "_public.login.tsx",
      "parent": "/_public"
    },
    "/_public/register": {
      "filePath": "_public.register.tsx",
      "parent": "/_public"
    },
    "/_auth/": {
      "filePath": "_auth.index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
